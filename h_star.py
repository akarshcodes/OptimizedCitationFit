# -*- coding: utf-8 -*-
"""h star

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ElE0-kpUDLcopqIlcCvVqC7lOi3Yu7__
"""

import pandas as pd
import numpy as np
from google.colab import files
from io import BytesIO

def calculate_h_index(cites):
    sorted_cites = np.sort(cites)[::-1]
    h_index = np.max(np.where(sorted_cites >= np.arange(1, len(sorted_cites) + 1))[0]) + 1
    return h_index

def approx_h_star(group_sheets, xls):
    sum_value = 0
    for sheet in group_sheets:
        df = pd.read_excel(xls, sheet_name=sheet)
        cites = df['Cites'].values
        M = np.max(cites)
        h_index = calculate_h_index(cites)
        if M != h_index:
            sum_value += (M * h_index**2) / (M - h_index)
    return np.sqrt(sum_value)

def calculate_empirical_h_star(group_sheets, xls):
    all_cites = []
    for sheet in group_sheets:
        df = pd.read_excel(xls, sheet_name=sheet)
        cites = df['Cites'].values
        all_cites.extend(cites)
    sorted_cites = np.sort(all_cites)[::-1]
    total_publications = len(all_cites)
    accumulated_publications = 0
    for i, citations in enumerate(sorted_cites):
        accumulated_publications += 1
        if accumulated_publications >= citations:
            return citations
    return 0

uploaded = files.upload()
file_name = next(iter(uploaded))
xls = pd.ExcelFile(BytesIO(uploaded[file_name]))

results = []

for i in range(1, 16):
    group_sheets = xls.sheet_names[:i+1]
    h_star = calculate_empirical_h_star(group_sheets, xls)
    approx_h = approx_h_star(group_sheets, xls)
    results.append({'Group Name': f'Group_{i}', 'Empirical h* Value': h_star, 'Approx h* Value': approx_h})

results_df = pd.DataFrame(results)
results_df.to_excel('h_star_values.xlsx', index=False)
files.download('h_star_values.xlsx')