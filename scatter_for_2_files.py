# -*- coding: utf-8 -*-
"""SCATTER FOR 2 FILES.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_e8AeJSzu1GC19OgdCw4JfJ0RP7f8Pls
"""

!pip install pandas numpy matplotlib python-docx openpyxl scipy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from scipy.optimize import minimize

uploaded_files = files.upload()
file_names = list(uploaded_files.keys())
xls1 = pd.ExcelFile(file_names[0])
xls2 = pd.ExcelFile(file_names[1])

def calculate_h_index(y_data):
    sorted_cites = np.sort(y_data)[::-1]
    h_index = np.max(np.where(sorted_cites >= np.arange(1, len(sorted_cites) + 1))[0]) + 1
    return h_index

def calculate_rmse(y_true, y_pred):
    return np.sqrt(np.mean((y_true - y_pred) ** 2))

def optimize_abc(x_data, y_data):
    def objective(params):
        a, b, c = params
        fitted_values = (b / (x_data + c)) - a
        return calculate_rmse(y_data, fitted_values)

    initial_guess = [0.1, 100, 72]
    result = minimize(objective, initial_guess, method='Nelder-Mead')
    return result.x

def optimize_power_law(x_data, y_data):
    M = np.max(y_data)
    def objective(params):
        C, lam = params
        fitted_values = C / (x_data ** lam)
        return calculate_rmse(y_data, fitted_values)

    initial_guess = [M, 1]
    result = minimize(objective, initial_guess, method='Nelder-Mead')
    return result.x

optimized_model_df1 = pd.DataFrame(columns=['Sheet', 'a_opt', 'b_opt', 'c_opt', 'RMSEEQN2'])
power_law_model_df1 = pd.DataFrame(columns=['Sheet', 'C_opt', 'lambda_opt', 'RMSE_PowerLaw'])

optimized_model_df2 = pd.DataFrame(columns=['Sheet', 'a_opt', 'b_opt', 'c_opt', 'RMSEEQN2'])
power_law_model_df2 = pd.DataFrame(columns=['Sheet', 'C_opt', 'lambda_opt', 'RMSE_PowerLaw'])

for sheet_name in xls1.sheet_names:
    df = pd.read_excel(xls1, sheet_name=sheet_name)
    x_data = df['Serial Number'].values
    y_data = df['ECC'].values

    a_opt, b_opt, c_opt = optimize_abc(x_data, y_data)
    fitted_values_opt = (b_opt / (x_data + c_opt)) - a_opt
    rmse_eqn2 = calculate_rmse(y_data, fitted_values_opt)

    C_opt, lambda_opt = optimize_power_law(x_data, y_data)
    fitted_values_power_law = C_opt / (x_data ** lambda_opt)
    rmse_power_law = calculate_rmse(y_data, fitted_values_power_law)

    optimized_row = pd.DataFrame({
        'Sheet': [sheet_name],
        'a_opt': [a_opt],
        'b_opt': [b_opt],
        'c_opt': [c_opt],
        'RMSEEQN2': [rmse_eqn2]
    })
    optimized_model_df1 = pd.concat([optimized_model_df1, optimized_row], ignore_index=True)

    power_law_row = pd.DataFrame({
        'Sheet': [sheet_name],
        'C_opt': [C_opt],
        'lambda_opt': [lambda_opt],
        'RMSE_PowerLaw': [rmse_power_law]
    })
    power_law_model_df1 = pd.concat([power_law_model_df1, power_law_row], ignore_index=True)

for sheet_name in xls2.sheet_names:
    df = pd.read_excel(xls2, sheet_name=sheet_name)
    x_data = df['Serial Number'].values
    y_data = df['ECC'].values

    a_opt, b_opt, c_opt = optimize_abc(x_data, y_data)
    fitted_values_opt = (b_opt / (x_data + c_opt)) - a_opt
    rmse_eqn2 = calculate_rmse(y_data, fitted_values_opt)

    C_opt, lambda_opt = optimize_power_law(x_data, y_data)
    fitted_values_power_law = C_opt / (x_data ** lambda_opt)
    rmse_power_law = calculate_rmse(y_data, fitted_values_power_law)

    optimized_row = pd.DataFrame({
        'Sheet': [sheet_name],
        'a_opt': [a_opt],
        'b_opt': [b_opt],
        'c_opt': [c_opt],
        'RMSEEQN2': [rmse_eqn2]
    })
    optimized_model_df2 = pd.concat([optimized_model_df2, optimized_row], ignore_index=True)

    power_law_row = pd.DataFrame({
        'Sheet': [sheet_name],
        'C_opt': [C_opt],
        'lambda_opt': [lambda_opt],
        'RMSE_PowerLaw': [rmse_power_law]
    })
    power_law_model_df2 = pd.concat([power_law_model_df2, power_law_row], ignore_index=True)

merged_df1 = pd.merge(optimized_model_df1, power_law_model_df1, on='Sheet')
merged_df2 = pd.merge(optimized_model_df2, power_law_model_df2, on='Sheet')

plt.figure(figsize=(10, 6))

plt.scatter(merged_df1['RMSEEQN2'], merged_df1['RMSE_PowerLaw'], label='File 1 RMSE Points', color='blue')
plt.scatter(merged_df2['RMSEEQN2'], merged_df2['RMSE_PowerLaw'], label='File 2 RMSE Points', color='green')

min_val = min(merged_df1['RMSEEQN2'].min(), merged_df1['RMSE_PowerLaw'].min(),
              merged_df2['RMSEEQN2'].min(), merged_df2['RMSE_PowerLaw'].min())
max_val = max(merged_df1['RMSEEQN2'].max(), merged_df1['RMSE_PowerLaw'].max(),
              merged_df2['RMSEEQN2'].max(), merged_df2['RMSE_PowerLaw'].max())
plt.plot([min_val, max_val], [min_val, max_val], color='red', linestyle='--', label='y=x')

plt.xlabel('Model 2 RMSE')
plt.ylabel('Power Law RMSE')
plt.title('Comparison of RMSE for Model 2 and Power Law')
plt.legend()
plt.grid(True)
plt.show()